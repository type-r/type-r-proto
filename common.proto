//
// Type-R data representations -- common objects.
//
// The data objects in this file are used throughout the various parts of the
// system, including the client-core protocol, core-option protocol,
// core-message manager protocol, and others.
//

syntax = "proto3";

package typer;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// A message received by an option.
message Message {
  // The medium name, which is used to associate the message with the backend
  // uniquely.
  string medium = 1;

  // The timestamp at which the message was received in the receiving
  // backend's clock.
  google.protobuf.Timestamp received_timestamp = 2;

  // The actual body of the message.
  bytes body = 3;

  // Sortpaths are the mechanism Type-R uses to filter messages.  The most
  // common way to filter messages is hierarchical.  Hence, each message gets
  // assigned a hierarchical path, and it can be prefix-searched efficiently.
  //
  // The path elements are separated by the slashes.  The assignment is
  // backend-specific, and the only requirement is that the medium is the first
  // part of the path.  All components of the path should be replaced with
  // double-slash For example, Zephyr triple (sipb, OS/2, *) would correspond
  // to the sortpath "zephyr/ATHENA.MIT.EDU/sipb/OS//2".
  string sortpath = 4;
  repeated string secondary_sortpath = 5;

  // Message ordinal is a unique number in the system assigned by the core
  // whenever the message is accepted from an option.  It is used to sort
  // messages in chronological order of being received, and is unique across
  // the individual message log.
  uint64 ordinal = 6;

  // Option-specific metadata.
  map<string, google.protobuf.Any> metadata = 7;
}

// Message encapsulating the error status.
message Error {
  // Module in which the error originated.
  string origin = 1;
  // Machine-readable error code string.
  string code = 2;
  // Human-readable error description.
  string description = 3;
}
